/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React from 'react';
import PropTypes from 'prop-types';
import { ClassNames } from '@emotion/react';
import { useEuiTheme, EuiFormRow, EuiAccordion, EuiToolTip, EuiIcon } from '@elastic/eui';
import { tooltipStylesFactory } from '../shared_styles';

// This is what is being generated by render() from the Arg class. It is called in FunctionForm

export const ArgLabel = (props) => {
  const { argId, className, label, help, expandable, children, simpleArg, initialIsOpen } = props;
  const { euiTheme } = useEuiTheme();
  return (
    <ClassNames>
      {({ css }) => (
        <div className={`canvasArg--header${className && ` ${className}`}`}>
          {expandable ? (
            <EuiAccordion
              id={`accordion-${argId}`}
              className="canvasSidebar__accordion"
              buttonContent={
                <EuiToolTip
                  content={help}
                  position="left"
                  className={css(tooltipStylesFactory(euiTheme))}
                >
                  <span>{label}</span>
                </EuiToolTip>
              }
              extraAction={simpleArg}
              initialIsOpen={initialIsOpen}
            >
              <div className="canvasSidebar__accordionContent">{children}</div>
            </EuiAccordion>
          ) : (
            <EuiFormRow
              display="columnCompressed"
              label={
                <EuiToolTip content={help}>
                  <span>
                    {label} <EuiIcon type="iInCircle" color="subdued" />
                  </span>
                </EuiToolTip>
              }
              id={argId}
            >
              {simpleArg || children}
            </EuiFormRow>
          )}
        </div>
      )}
    </ClassNames>
  );
};

ArgLabel.propTypes = {
  argId: PropTypes.string,
  label: PropTypes.string,
  help: PropTypes.string,
  expandable: PropTypes.bool,
  initialIsOpen: PropTypes.bool,
  simpleArg: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.element]).isRequired,
  className: PropTypes.string,
};
